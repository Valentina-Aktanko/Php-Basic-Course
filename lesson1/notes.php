<?php

/*
	код на php должен быть заключен в конструкцию <?php    ?>
*/

?>

Все что находится вне этих конструкция воспринимается как html </br>

<?php

//
// КОМЕНТАРИИ
//


// Однострочный комментарий. Действует до конца строки

/*
	Многострочный комментарий
	Может занимает несколько строк
	Комментарии полностью игнорируется интерпритатором
	и используются как заметки для программиста
*/

# Так же допускается использование знака # для однострочных комментариев

?>


<?php

//
// Строки
//


/*

	Команда echo.
	Выводит следующую за ней строку как текст. 

	В конце каждой операции на php ставится знак ";"

*/

echo 'Hello, world!</br>';

/*
	Строки должны быть заключены в ординарные ('  ') или двойные ("  ") кавычки. В чем разница поговорим дальше.
*/

echo "Hello, world!</br>";





//
// Переменные
//

/*
	Переменные в php должны начинаться со знака $
	Переменная в PHP должна состоять из латинских символов (хотя язык допускает имя переменной на других языках) и цифр, не должна содержать спецсимволов, кроме "_", и не может начинаться с числа

	Валидные имена переменных
*/

$variable;
$myVariable;
$variable_1;
$_variable;

/*
	Невалидные переменные:
	$1variable
	$переменная (сработает, но так делать нельзя)
	$any%other/variable­withSymbols
*/





//
// Константы
//

/*
	Константы задаются только 1 раз командой define.
	В скобочках первым аргументом указывается имя константы, вторым значение.
	Правила написания констант такие же,
	но согласно стандартам, константы пишутся заглвными буквами
*/

define('MY_CONST', 123);



/*
	Используем переменную и константу.
	Создадим переменную с приветствием
*/
$hello = 'Hello, ';
define('WORLD', 'world!');


//И выведем ее на экран
echo "Приветствие выведено через переменные и константы: ";
echo $hello;
echo WORLD;
echo "</br>";



?>

<?php

//
// Типы данных
//

/*
	8 простых типов php:
	* boolean (bool) - логический тип. Может принимать значение true или false
	* integer (int) - целые числа. Может принимать любое целочисленное значение от -2 147 483 648 до 2 147 483 647
	* double (float) - дробные числа. Может принимать любое дробное значение 
	* string - строка. 
	* array - массив. Об этом типа мы поговорим на следующих уроках
	* object - объект. Затрагивается на курсе PHP Уровень 2, является основой ООП
	* resource - ресурс. Этот тип мы затронем когда будет говорить о базе данных и файловой системе
	* NULL - просто "ничего". Использование этого значения применимо в случаях, когда нужно указать, что переменная не имеет значения
*/

/*
	Функция var_dump()
	Команда выводящая на экран не только значение переменной но и ее тип
*/

$bool = true;
$int = 1;
$float = 1.1;
$string = 'Строка';
$array = [];
var_dump($bool);
echo "</br>";
var_dump($int);
echo "</br>";
var_dump($float);
echo "</br>";
var_dump($string);
echo "</br>";
var_dump($array);
echo "</br>";


/*
	PHP обладает возможностью использовать также двоичные, восьмеричные и шестнадцатеричные числа по следующим шаблонам
	* шестнадцатеричные : 0[xX][0-9a-fA-F]
	* восьмеричные : 0[0-7]
	* двоичные : 0b[01]

	Все числа ниже равны 42 в 10тичной системе
*/

$int10 = 42;
$int2 = 0b101010;
$int8 = 052;
$int16 = 0x2A;
echo "Десятеричная система $int10 <br>";
echo "Двоичная система $int2 <br>";
echo "Восьмеричная система $int8 <br>";
echo "Шестнадцатеричная система $int16 <br>";




//
//Простешие операции с типами
//



/*
	СТРОКИ


	Конкатенация (склеивание) строк.
	Для того что бы объеденить две строки между собой, используется операция конкатенации (знанк ".")
	Выглядит это так
*/

echo 'Эта строка' . ' склеена ' . 'из нескольких' . '</br>';
echo 'Так же можно склеивать переменные. Привет, ' . $name . '</br>';

/*
	Конкатенации иногда можно избежать используя двойные кавычки
	Разница между ' ' и " " заключается в том,
	что внутри двойных кавычек интерпритатор php ищет переменные и подставляех их значение
	Например, ощутите разницу
*/

$name = 'Vasya';
echo 'Приветствие в ординарных кавычках: Привет, $name </br>';
echo "Приветствие в ординарных кавычках: Привет, $name </br>";

/*
	МАТЕМАТИЧЕСКИЕ ОПЕРАЦИИ
*/

$a = 4;
$b = 5;
echo $a + $b . '<br>';    // сложение
echo $a * $b . '<br>';    // умножение
echo $a - $b . '<br>';    // вычитание
echo $a / $b . '<br>';  // деление
echo $a % $b . '<br>'; // остаток от деления
echo $a ** $b . '<br>'; // возведение в степень

/*
	ЛОГИЧЕСКИЕ ОПЕРАЦИИ
*/
$a = 4;
$b = 5;
$false = false;
var_dump($a == $b);  // Сравнение по значению
echo "</br>";
var_dump($a === $b); // Сравнение по значению и типу
echo "</br>";
var_dump($a > $b);    // Больше
echo "</br>";
var_dump($a < $b);    // Меньше
echo "</br>";
var_dump($a <> $b);  // Не равно
echo "</br>";
var_dump($a != $b);   // Не равно
echo "</br>";
var_dump($a !== $b); // Не равно без приведения типов
echo "</br>";
var_dump($a <= $b);  // Меньше или равно
echo "</br>";
var_dump($a >= $b);  // Больше или равно
echo "</br>";
var_dump(!$false); // Логические 'не'
echo "</br>";


/* 
	СОКРАЩЕННЫЕ ОПЕРАЦИИ
*/

$a = 1;
$b = 1;
$c = 2;

$a = $a + $c; // Прибавить к переменной $a переменную $c
$b += $c; // Эквивалентная короткая запись

var_dump($a === $b);
echo "</br>";

//Другие короткие записи
$a -= 1;
$a *= 1;
$a /= 1;
$a %= 2;
$a **= 1;


/*
	Постинкремент и преинкремент.

	Задача этих операций прибавить к переменной единицу (удобно в счетчиках)

	В простом виде операции не имею разницы и эквивалентны друг другу
*/

$a = 1;
$b = 1;

$a++; //Постинкремент
++$b; //Преинкремент

echo $a . '</br>';
echo $b . '</br>';

/*
	Но если пост- и пре- инкременты используются внутри сложных операций, 
	тогда постинкремент сначала выполняется в операции со старым значением,
	а после выполнения всех других операций, увелечивает знаение на 1.
	Преинкремент сначала увеличивает значение на 1,
	а потом выполняются остальные операции
*/

$a = 1;
$b = 1;
echo 'Эта строка с выполнением постинкремента. $a = ' . $a++ . '</br>';
echo '$a = ' . $a . '</br>';
echo 'Эта строка с выполнением преинкремента. $b = ' . ++$b . '</br>';
echo '$b = ' . $b . '</br>';

/*
	Аналогично существуют постдекримент и предекрименты
*/
$a--;
--$a;




//
// Приведение типов
//

/*

	Все простейшие операции ожидают значений определенного типа.
	Если вы передаете им тип которого они не ждут
	интерпритатор автоматически приведет значение к нужному типу.

*/

var_dump('1' + '1'); //int(2)
var_dump(0 . 12); //string(3) "012" 
var_dump(!0); //bool(true)

/*
	Так же, вы можете сами привести значение к нужному типу, указав тип в скобках перед переменной
*/
var_dump((int)true); //int(1)
var_dump((string)13); //string(1) "13"
var_dump((bool)'string');

/*
	
	Будте внимательны с приведением типов из строк к числам
	PHP может сыграть злую шутку при неправильном приведении типов
	Ознакомьтесь с хорошей статьей на эту тему

*/

?>

<br>

<a href="https://habr.com/post/259497/" target="_blank">Статья о приведении типов</a>


<?php
/*


ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);


*/